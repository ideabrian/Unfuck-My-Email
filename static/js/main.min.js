(function () {
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};





var asyncGenerator = function () {
  function AwaitValue(value) {
    this.value = value;
  }

  function AsyncGenerator(gen) {
    var front, back;

    function send(key, arg) {
      return new Promise(function (resolve, reject) {
        var request = {
          key: key,
          arg: arg,
          resolve: resolve,
          reject: reject,
          next: null
        };

        if (back) {
          back = back.next = request;
        } else {
          front = back = request;
          resume(key, arg);
        }
      });
    }

    function resume(key, arg) {
      try {
        var result = gen[key](arg);
        var value = result.value;

        if (value instanceof AwaitValue) {
          Promise.resolve(value.value).then(function (arg) {
            resume("next", arg);
          }, function (arg) {
            resume("throw", arg);
          });
        } else {
          settle(result.done ? "return" : "normal", result.value);
        }
      } catch (err) {
        settle("throw", err);
      }
    }

    function settle(type, value) {
      switch (type) {
        case "return":
          front.resolve({
            value: value,
            done: true
          });
          break;

        case "throw":
          front.reject(value);
          break;

        default:
          front.resolve({
            value: value,
            done: false
          });
          break;
      }

      front = front.next;

      if (front) {
        resume(front.key, front.arg);
      } else {
        back = null;
      }
    }

    this._invoke = send;

    if (typeof gen.return !== "function") {
      this.return = undefined;
    }
  }

  if (typeof Symbol === "function" && Symbol.asyncIterator) {
    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
      return this;
    };
  }

  AsyncGenerator.prototype.next = function (arg) {
    return this._invoke("next", arg);
  };

  AsyncGenerator.prototype.throw = function (arg) {
    return this._invoke("throw", arg);
  };

  AsyncGenerator.prototype.return = function (arg) {
    return this._invoke("return", arg);
  };

  return {
    wrap: function (fn) {
      return function () {
        return new AsyncGenerator(fn.apply(this, arguments));
      };
    },
    await: function (value) {
      return new AwaitValue(value);
    }
  };
}();















var get = function get(object, property, receiver) {
  if (object === null) object = Function.prototype;
  var desc = Object.getOwnPropertyDescriptor(object, property);

  if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);

    if (parent === null) {
      return undefined;
    } else {
      return get(parent, property, receiver);
    }
  } else if ("value" in desc) {
    return desc.value;
  } else {
    var getter = desc.get;

    if (getter === undefined) {
      return undefined;
    }

    return getter.call(receiver);
  }
};

















var set = function set(object, property, value, receiver) {
  var desc = Object.getOwnPropertyDescriptor(object, property);

  if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);

    if (parent !== null) {
      set(parent, property, value, receiver);
    }
  } else if ("value" in desc && desc.writable) {
    desc.value = value;
  } else {
    var setter = desc.set;

    if (setter !== undefined) {
      setter.call(receiver, value);
    }
  }

  return value;
};

/*var checkLogin = function checkLogin(callback) {
  firebase.auth().onAuthStateChanged(function (user) {

    // Get the elements we need to update on login/logout.
    var username = document.querySelector('.user-info__name');
    var photo = document.querySelector('.user-info__photo');
    var logout = document.querySelector('.user-info__logout');

    // If a user object exists, we know the user is logged in.
    if (user) {
      var _ret = function () {

        // Redirect to the templates page if the user is already logged in.
        if (document.location.href.match(/login\.html/)) {
          document.location.href = './templates.html';
          return {
            v: void 0
          };
        }

        // Get the relevant details for display.
        var displayName = user.displayName;
        var photoURL = user.photoURL;


        user.getToken().then(function () {

          // Enable logging out.
          logout.addEventListener('click', function (event) {
            event.preventDefault();
            firebase.auth().signOut();
          });

          // Update text and visibility for logged in state.
          logout.textContent = 'Log Out';
          username.textContent = displayName;
          photo.src = photoURL;

          // Make sure the profile photo is visible.
          photo.classList.remove('user-info__photo--hidden');

          // Fire the callback, if provided.
          if (typeof callback === 'function') {
            callback();
          }
        });
      }();

      if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
    } else {

      // User is signed out.
      if (document.location.href.match(/templates\.html/)) {
        document.location.href = './login.html';
        return;
      }

      // Update text and visibility for logged out state.
      photo.classList.add('user-info__photo--hidden');
      username.textContent = '';
      logout.textContent = 'Log In or Create an Account';
    }
  }, function (error) {
    document.getElementById('error').textContent = JSON.stringify(error);
  });
};*/

var forms = [{
  category: 'damage-control',
  name: 'The client didn’t respond to my last email about a missed deadline.',
  heading: 'Call first. If that doesn’t work, try this.',
  subheading: 'You’re probably pissed by now. Remember that you and your client are on the same team.',
  slug: 'second-missed-deadline',
  template_id: 'missed-deadline-two',
  questions: [{
    type: 'text',
    label: 'What’s your name?',
    name: 'name',
    id: 'name'
  }, {
    type: 'text',
    label: 'What’s your client’s name?',
    name: 'client_name',
    id: 'client_name'
  }, {
    type: 'radio',
    label: 'What day can you take a phone call?',
    name: 'date',
    options: [{
      id: 'today',
      label: 'Today',
      value: 'today'
    }, {
      id: 'tomorrow',
      label: 'Tomorrow',
      value: 'tomorrow'
    }]
  }, {
    type: 'radio',
    label: 'What’s the best time for a call?',
    name: 'time_one',
    options: [{
      id: 'morning',
      label: 'Morning works best.',
      value: '8 am and 10 am'
    }, {
      id: 'afternoon',
      label: 'I’m not human until after 10 am.',
      value: '11 am and 1 pm'
    }, {
      id: 'evening',
      label: 'Is never an option? Late afternoon, I guess.',
      value: '3 pm and 5 pm'
    }]
  }, {
    type: 'radio',
    label: 'How long has it been since the deadline passed?',
    name: 'number_of_days',
    options: [{
      id: 'one day',
      label: 'Just a day.',
      value: 'a day'
    }, {
      id: 'two days',
      label: 'It’s been a couple days.',
      value: 'a couple days'
    }, {
      id: 'four days',
      label: 'It’s been a few days already.',
      value: 'quite a few days'
    }, {
      id: 'a week',
      label: 'A whole damn week. FTW!',
      value: 'about a week'
    }]
  }]
}, {
  category: 'damage-control',
  name: 'The client didn’t get me what I needed and we missed a deadline.',
  heading: 'Get your project back on track.',
  subheading: 'And keep yourself sane.',
  slug: 'first-missed-deadline',
  template_id: 'missed-deadline-one',
  questions: [{
    type: 'text',
    label: 'What’s your name?',
    name: 'name',
    id: 'name'
  }, {
    type: 'text',
    label: 'What’s your client’s name?',
    name: 'client_name',
    id: 'client_name'
  }, {
    type: 'radio',
    label: 'When did your deadline pass?',
    name: 'day',
    options: [{
      id: 'today',
      label: 'Today',
      value: 'today'
    }, {
      id: 'two days',
      label: 'A couple days ago',
      value: 'a couple of days ago'
    }, {
      id: 'three days',
      label: 'A few days ago',
      value: 'earlier this week'
    }]
  }, {
    type: 'radio',
    label: 'If you got the items you needed today, how much will it push back the timeline?',
    name: 'approximate_time',
    options: [{
      id: 'a few days',
      label: 'A few days',
      value: 'by at least a few days'
    }, {
      id: 'a week',
      label: 'A week',
      value: 'by about a week'
    }, {
      id: 'a couple weeks',
      label: 'A couple weeks',
      value: 'by a couple weeks'
    }]
  }]
}, {
  category: 'damage-control',
  name: 'We’re coming up on a deadline and I need more information.',
  heading: 'Don’t get blamed for a missed deadline.',
  subheading: 'You need all the information so you can kick all the ass.',
  slug: 'upcoming-deadline',
  template_id: 'upcoming-deadline',
  questions: [{
    type: 'text',
    label: 'What’s your name?',
    name: 'name',
    id: 'name'
  }, {
    type: 'text',
    label: 'What’s your client’s name?',
    name: 'client_name',
    id: 'client_name'
  }, {
    type: 'radio',
    label: 'When is your first deadline coming up?',
    name: 'days',
    options: [{
      id: 'tomorrow',
      label: 'Tomorrow',
      value: 'coming up tomorrow'
    }, {
      id: 'today',
      label: 'Today',
      value: 'today'
    }, {
      id: 'two days',
      label: 'In a couple days',
      value: 'coming up in a few days'
    }, {
      id: 'this week',
      label: 'This week',
      value: 'coming up this week'
    }]
  }, {
    type: 'radio',
    label: 'What items are you waiting on?',
    name: 'items',
    options: [{
      id: 'files',
      label: 'Files',
      value: 'the files we talked about'
    }, {
      id: 'photos',
      label: 'Photos',
      value: 'the photos we discussed'
    }, {
      id: 'materials',
      label: 'Various things',
      value: 'the materials we discussed'
    }, {
      id: 'several things',
      label: 'A whole bunch of shit',
      value: 'the items we talked about'
    }]
  }, {
    type: 'radio',
    label: 'When do you need it by?',
    name: 'date',
    options: [{
      id: 'yesterday',
      label: 'I needed it yesterday.',
      value: 'by the end of the day today'
    }, {
      id: 'tomorrow',
      label: 'Tomorrow',
      value: 'by tomorrow'
    }, {
      id: 'end of the week',
      label: 'By Friday at the latest.',
      value: 'by the end of the week'
    }, {
      id: 'soon',
      label: 'Soon, but we still have time.',
      value: 'by Monday of next week'
    }]
  }]
}, {
  category: 'damage-control',
  name: 'My client is asking for lots of extra things.',
  heading: 'Start setting boundaries. Stop doing unpaid work.',
  subheading: 'Scope creep’s a real bitch. Don’t let it get you down.',
  slug: 'scope-creep',
  template_id: 'scope-creep',
  questions: [{
    type: 'text',
    label: 'What’s your name?',
    name: 'name',
    id: 'name'
  }, {
    type: 'text',
    label: 'What’s your client’s name?',
    name: 'client_name',
    id: 'client_name'
  }, {
    type: 'text',
    label: 'Which one of these new tasks do you think will take you the longest?',
    name: 'update_one',
    id: 'update_one'
  }]
}, {
  category: 'project-lifecycle',
  name: 'Project Contract',
  heading: 'Every project needs a contract.',
  subheading: 'Yes, even this one. Don’t worry, I got you covered.',
  slug: 'contract',
  template_id: 'template-first-contract',
  questions: [{
    type: 'text',
    label: 'What’s your name?',
    name: 'name',
    id: 'name'
  }, {
    type: 'text',
    label: 'What’s your client’s name?',
    name: 'client_name',
    id: 'client_name'
  }, {
    type: 'radio',
    label: 'What type of meeting did you have?',
    name: 'meeting_type',
    options: [{
      id: 'call',
      label: 'Phone call',
      value: 'chat with me'
    }, {
      id: 'video',
      label: 'Video call',
      value: 'meet with me'
    }, {
      id: 'coffee',
      label: 'Met for coffee',
      value: 'meet me for coffee'
    }, {
      id: 'person',
      label: 'In-person meeting',
      value: 'meet me'
    }]
  }, {
    type: 'radio',
    label: 'When did you talk?',
    name: 'timeline',
    options: [{
      id: 'today',
      label: 'Earlier today',
      value: 'today'
    }, {
      id: 'this-week',
      label: 'Earlier this week',
      value: 'earlier this week'
    }, {
      id: 'last-week',
      label: 'Last week',
      value: 'last week. I hope you had a great weekend'
    }, {
      id: 'several-weeks',
      label: 'More than a week ago',
      value: 'the other day. I hope everything has been going well'
    }]
  }, {
    type: 'radio',
    label: 'How do you feel about this project?',
    name: 'project_feeling',
    options: [{
      id: 'excited',
      label: 'Excited!',
      value: 'excited to work on'
    }, {
      id: 'stoked',
      label: 'Stoked!',
      value: 'stoked to work on'
    }, {
      id: 'interested',
      label: 'Interested in learning more',
      value: 'curious to learn more about'
    }]
  }, {
    type: 'radio',
    label: 'How do you feel about project contracts?',
    name: 'contract_feeling',
    options: [{
      id: 'hassle',
      label: 'They’re a hassle to try and figure out.',
      value: 'can be a hassle'
    }, {
      id: 'nervous',
      label: 'I’m nervous it’ll make my client uncomfortable.',
      value: 'can be a little annoying'
    }, {
      id: 'untrustworthy',
      label: 'I’m worried my client will think I don’t trust them.',
      value: 'can feel really formal'
    }, {
      id: 'necessary',
      label: 'They’re not fun to create, but I know we should have it.',
      value: 'are usually a bit of a pain to deal with'
    }]
  }]
},
/*{
  name: 'Cookies',
  heading: 'Who likes cookies?',
  subheading: 'I do! I do!',
  slug: 'cookies',
  template_id: 'template-cookies',
  questions: [
    {
      type: 'text',
      label: 'What is your name?',
      name: 'name',
      id: 'name',
    },
    {
      type: 'radio',
      label: 'What is your favoritie cookie?',
      name: 'cookie',
      options: [
        {
          id: 'sugar',
          label: 'Sugar Cookies',
          value: 'I love cookies! Sugar cookies are my favorite.',
        },
        {
          id: 'chocolate_chip',
          label: 'Chocolate Chip',
          value: 'I love cookies! Chocolate chip cookies are my favorite.',
        },
        {
          id: 'oatmeal',
          label: 'Oatmeal',
          value: 'I love cookies! But I oatmeal cookies are my favorite, so you shouldn’t trust my judgment.',
        },
        {
          id: 'nope',
          label: 'I don’t like cookies',
          value: 'I am a terrible person.',
        },
      ],
    },
  ],
},*/
{
  category: 'project-lifecycle',
  name: 'Follow-Up After a First Meeting',
  heading: 'Need to follow up with a client after your first meeting?',
  subheading: 'Answer these questions and we’ll sort that shit out.',
  slug: 'first-meeting-follow-up',
  template_id: 'contract-template',
  questions: [{
    type: 'text',
    label: 'What is your name?',
    name: 'name',
    id: 'name'
  }, {
    type: 'text',
    label: 'What is your client’s name?',
    name: 'client_name',
    id: 'client_name'
  }, {
    type: 'radio',
    label: 'How did you get together?',
    name: 'meeting_type',
    options: [{
      id: 'call',
      label: 'Phone call',
      value: 'chat with me'
    }, {
      id: 'video',
      label: 'Video call',
      value: 'meet with me'
    }, {
      id: 'coffee',
      label: 'Met for coffee',
      value: 'meet me for coffee'
    }, {
      id: 'person',
      label: 'In-person meeting',
      value: 'meet me'
    }]
  }, {
    type: 'radio',
    label: 'When did you talk?',
    name: 'timeline',
    options: [{
      id: 'today',
      label: 'Earlier today',
      value: 'today'
    }, {
      id: 'this-week',
      label: 'Earlier this week',
      value: 'earlier this week'
    }, {
      id: 'last-week',
      label: 'Last week',
      value: 'last week. I hope you had a great weekend'
    }, {
      id: 'several-weeks',
      label: 'More than a week ago',
      value: 'the other day. I hope everything has been going well'
    }]
  }, {
    type: 'radio',
    label: 'How do you feel about this project?',
    name: 'project_feeling',
    options: [{
      id: 'excited',
      label: 'Excited!',
      value: 'excited to work on'
    }, {
      id: 'stoked',
      label: 'Stoked!',
      value: 'stoked to work on'
    }, {
      id: 'interested',
      label: 'Interested in learning more',
      value: 'curious to learn more about'
    }]
  }, {
    type: 'radio',
    label: 'We gotta keep conversations going with clients. What are you going to do next?',
    name: 'communication',
    options: [{
      id: 'proposal',
      label: 'Send a proposal',
      value: 'send over a proposal'
    }, {
      id: 'quote',
      label: 'Send a quote',
      value: 'send you a quote'
    }, {
      id: 'phonecall',
      label: 'Call them on the phone',
      value: 'give you a call'
    }, {
      id: 'connect',
      label: 'Send another email if you don’t hear back',
      value: 'connect with you'
    }]
  }]
}, {
  category: 'project-lifecycle',
  name: 'I’d like to get a referral from my client.',
  heading: 'Want more money? Then get those referrals.',
  subheading: 'More money means more burritos, people. And everyone wants more burritos.',
  slug: 'referral',
  template_id: 'client-referral',
  questions: [{
    type: 'text',
    label: 'What’s your name?',
    name: 'name',
    id: 'name'
  }, {
    type: 'text',
    label: 'What’s your client’s name?',
    name: 'client_name',
    id: 'client_name'
  }, {
    type: 'text',
    label: 'In one word, what is your main job title? (copywriter, web developer, graphic designer...?)',
    name: 'your_role',
    id: 'your_role'
  }, {
    type: 'text',
    label: 'What’s one service you’re offering right now? (ex. blog posts, website maintenance, logo design...?)',
    name: 'specific_thing_one',
    id: 'specific_thing_one'
  }, {
    type: 'text',
    label: 'What’s another service you’re excited about offering? (ex. article research, website updates, design updates...?)',
    name: 'specific_thing_two',
    id: 'specific_thing_two'
  }, {
    type: 'text',
    label: 'Okay, pick one more thing you’d like to do. Last one, I swear. (ex. editing, template modifications, illustrations...?)',
    name: 'specific_thing_three',
    id: 'specific_thing_three'
  }]
}, {
  category: 'project-lifecycle',
  name: 'I want to get feedback on a completed project.',
  heading: 'Happy clients throw money at you.',
  subheading: 'Just ask them not to throw quarters. Cuz that shit hurts.',
  slug: 'feedback',
  template_id: 'client-feedback',
  questions: [{
    type: 'text',
    label: 'What’s your name?',
    name: 'name',
    id: 'name'
  }, {
    type: 'text',
    label: 'What’s your client’s name?',
    name: 'client_name',
    id: 'client_name'
  }, {
    type: 'text',
    label: 'What’s the link to your client survey? (If you still need to create a survey, check out Survey Monkey!)',
    name: 'client_survey',
    id: 'client_survey'
  }]
}];

// Define the classes for handling animation.
var ENABLED = 'js--enable-show-hide';
var FADE = 'js--fade-out';
var HIDDEN = 'js--hidden';

/**
 * Adds a class that enables CSS transitions for animation.
 * @param  {Element} element the element to be animated
 * @return {void}
 */
function enable(element) {
  element.classList.add(ENABLED);
}

/**
 * Adds a class to trigger a fade-in animation.
 * @param  {Element} element         the element to animate
 * @param  {Number} queuedShowOrHide ID of a `timeoutID` to clear
 * @return {void}
 */
function show(element, queuedShowOrHide) {

  if (!element) {
    return;
  }

  // If `hide()` has been called, clear the timeout to avoid problems.
  if (queuedShowOrHide) {
    clearTimeout(queuedShowOrHide);
  }

  // Ensure that the element supports animation.
  enable(element);

  element.classList.remove(HIDDEN);

  // Without a split-second delay, animations don’t always work as expected.
  setTimeout(function () {
    return element.classList.remove(FADE);
  }, 10);
}

/**
 * Adds a class to trigger a fade-out animation.
 * @param  {Element} element the element to animate
 * @return {Number}          a timeoutID
 */
function hide(element) {

  if (!element) {
    return;
  }

  // Ensure the element supports animation.
  enable(element);

  // Start the animation.
  element.classList.add(FADE);

  /*
   * Create a timeout to add the hidden class after the animation is finished.
   * Return the `timeoutID` to allow this to be canceled if the element is
   * toggled back to visible before this is finished.
   */
  return setTimeout(function () {
    element.classList.add(HIDDEN);
  }, 400);
}

var contractTemplate = "\nHi {{client_name}},<br>\n<br>\nThanks so much for taking the time to {{meeting_type}} {{timeline}}. I\u2019m really {{project_feeling}} this project. I know you\u2019re busy, so simply wanted to check in and see if you\u2019ve got any questions I could clarify before we move on to the next step.<br><br>\n\nIf you haven\u2019t got any questions for me, I\u2019ll {{communication}} in the next few days with project details.<br>\n<br>\nI look forward to hearing from you!<br>\n<br>\nTake care,<br>\n{{name}}\n";

var firstContract = "\nHey {{client_name}}, <br>\n<br>\nThanks so much for taking the time to {{meeting_type}} the other day. I\u2019m really {{project_feeling}} this project. I\u2019ve taken the details from the proposal I sent you and included everything in the contract.<br>\n<br>\nI know contracts {{contract_feeling}}, but it's one document that lays everything out from the proposal, plus includes payment details, and the legal info to protect us both.<br>\n<br>\nThe best part is it's all written in plain English \u2014 no legalese for me! <br>\n<br>\nI've attached the contract to this email.<br>\n<br>\nPlease let me know if you\u2019ve got any questions or concerns and I\u2019ll be happy to clarify!<br>\n<br>\nI look forward to working together,<br>\n<br>\n{{name}}\n";

var scopeCreep = "\nHi {{client_name}},<br>\n<br>\nI hope you\u2019re having a good week. I reviewed the email that you sent me about additional updates. I\u2019m so glad that you\u2019ve been happy with my work, and I\u2019ve had a great time working on this project with you.<br>\n<br>\nI\u2019ve made a few of the changes you listed, but {{update_one}} in addition will take me a few hours.<br>\n<br>\nI\u2019m happy to do this for you so you don\u2019t have to worry about it. In order to start, I just need you to approve a new scope of work to make sure that everything is covered and that we\u2019re both on the same page for the changes that need to happen.<br>\n<br>\nI went ahead and included an updated scope to this email. If it looks alright, once it's signed and returned I can go ahead and keep working on the changes. If you\u2019ve got questions, I\u2019m happy to clarify the scope or get on a call to discuss it.<br>\n<br>\nThanks,<br>\n<br>\n{{name}}\n";

var upcomingDeadline = "\nHi {{client_name}}<br>\n<br>\nI\u2019m going through my to-do list and see that we have our first deadline for the project {{days}}. In order to hit this, I still need you to send over {{items}} {{date}}.<br>\n<br>\nPlease let me know if you need anything or if I can help in any way. Thanks so much!<br>\n<br>\nHave a great day,<br>\n<br>\n{{name}}\n";

var missedDeadlineOne = "\nHi {{client_name}},<br>\n<br>\nI wanted to check in and see what the status was on providing the items we talked about for the project.<br>\n<br>\nSince our original deadline passed {{day}}, we'll just need to update our timelines.<br>\n<br>\nOn the current schedule, if I can get this info today, it will push the project back {{approximate_time}}. Please let me know if you need anything from me.<br>\n<br>\nAs of right now, I\u2019m unable to move forward with the project without these items.<br>\n<br>\nIf you\u2019re having any trouble, I\u2019m happy to get on a call with you and see how I can help.<br>\n<br>\nThanks!<br>\n<br>\n{{name}}\n";

var missedDeadlineTwo = "\nHi {{client_name}},<br>\n<br>\nI gave you a call earlier to see if there was any other information you needed from me in order to send over the items we talked about. I was wondering if you had time for a 30 minute call {{date}}, between {{time_one}} to discuss it.<br>\n<br>\nWe\u2019ve missed our deadline by {{number_of_days}}, and I really want to make sure that we\u2019re able to stay within your timeframe.<br>\n<br>\nRight now, I\u2019m unable to move forward with the project without the items we discussed.<br>\n<br>\nPlease let me know if one of these times works for you to have a short meeting.<br>\n<br>\nThanks so much,<br>\n<br>\n{{name}}\n";

var formTemplate = "\n<div class=\"row question-heading\">\n  <div class=\"col-md-12\">\n    <h1 class=\"question-info\">{{ heading }}</h1>\n    <h2>{{ subheading }}</h2>\n  </div>\n</div>\n{{#each questions}}\n  {{{input}}}\n{{/each}}\n<div class=\"row btn-group\" id=\"submit\">\n  <div class=\"col-md-6 col-md-offset-3\">\n    <button class=\"btn btn-default btn-lg center-block\" type=\"submit\">\n      Gimme my template\n    </button>\n  </div>\n</div>\n<input type=\"hidden\" name=\"template_id\" value=\"{{ template_id }}\">\n";

var availableTemplates = "\n<ul class=\"email-list\">\n  {{#each forms}}\n  <li>\n    <a class=\"email-type-link\" href=\"#{{ slug }}\">{{ name }}</a>\n  </li>\n  {{/each}}\n</select>\n";

var inputText = "\n<div class=\"row question-block\">\n  <div class=\"col-md-8 col-md-offset-2\">\n    <h2 class=\"question-title\">{{ label }}</h2>\n    <div class=\"row\">\n      <div class=\"input-group\">\n        <input type=\"text\" name=\"{{ name }}\" id=\"{{ id }}\">\n      </div>\n    </div>\n  </div>\n</div>\n";

var inputRadio = "\n<div class=\"row question-block\">\n  <div class=\"col-md-8 col-md-offset-2\">\n    <h2 class=\"question-title\">{{ label }}</h2>\n    <div class=\"question-options\">\n      {{#each options}}\n      <div class=\"input-group\">\n        <input type=\"radio\" name=\"{{ ../name }}\" id=\"{{ id }}\" value=\"{{ value }}\">\n        <label for=\"{{ id }}\" class=\"question-text\">{{ label }}</label>\n      </div>\n      {{/each}}\n    </div>\n  </div>\n</div>\n";

var clientReferral = "\nHey {{client_name}},<br>\n<br>\nHope you've been doing well and that things are going great with your business!<br>\n<br>\nI've got some spots open for client work and wanted to let you know, in case anyone in your network was in need of a {{your_role}}.<br>\n<br>\nWhat I can offer right now is: {{specific_thing_one}}, {{specific_thing_two}}, or {{specific_thing_three}}.<br>\n<br>\nIf you've got anybody you think I should get in touch with, just let me know.<br>\n<br>\nThanks so much, and I'll talk to you later!<br>\n<br>\n{{name}}\n";

var clientFeedback = "\nHi {{client_name}},<br>\n<br>\nThanks so much for working with me on this project. I had a great time and I hope we can work together again!<br>\n<br>\nI've sent your final invoice over in a separate email for your review.<br>\n<br>\nAnd last but not least, I include a survey after every project to make sure I'm providing great service. It only takes 5 minutes (like actually 5 minutes), and really helps me make sure clients are happy.<br> \n<br>\nYou can fill it out by visiting this link: {{client_survey}}<br>\n<br>\nPlease let me know if you've got any other questions \u2014 I'm happy to help you out!<br>\n<br>\nThanks again,<br>\n<br>\n{{name}}\n";

var templates = {
  'contract-template': contractTemplate,
  'template-first-contract': firstContract,
  'scope-creep': scopeCreep,
  'upcoming-deadline': upcomingDeadline,
  'missed-deadline-one': missedDeadlineOne,
  'missed-deadline-two': missedDeadlineTwo,
  'form-template': formTemplate,
  'available-templates': availableTemplates,
  'input-text': inputText,
  'input-radio': inputRadio,
  'client-referral': clientReferral,
  'client-feedback': clientFeedback
};

function getEmailTemplate(template_id) {
  var emailTemplate = templates[template_id];

  return Handlebars.compile(emailTemplate);
}

/**
 * Choose the correct input template based on the type.
 * See http://handlebarsjs.com/#helpers for more info.
 *
 * @return {String} the rendered template.
 */
function renderInput() {
  var textInput = Handlebars.compile(templates['input-text']);
  var radioInput = Handlebars.compile(templates['input-radio']);

  return this.type === 'radio' ? radioInput(this) : textInput(this);
}

/**
 * For copy-pasting to an email editor, remove <br> tags.
 * @param  {String} markup the template as HTML markup
 * @return {String}        the template with <br> tags removed
 */
function removeBreakTags(markup) {
  return markup.replace(/<br[^>]*?>/gi, '').trim();
}

var isValidElement = function isValidElement(element) {
  return element.name && element.value;
};

/**
 * Checks if an element’s value can be saved (e.g. not an unselected checkbox).
 * @param  {Element} element  the element to check
 * @return {Boolean}          true if the value should be added, false if not
 */
var isValidValue = function isValidValue(element) {
  return !['checkbox', 'radio'].includes(element.type) || element.checked;
};

/**
 * Checks if an input is a checkbox, because checkboxes allow multiple values.
 * @param  {Element} element  the element to check
 * @return {Boolean}          true if the element is a checkbox, false if not
 */
var isCheckbox = function isCheckbox(element) {
  return element.type === 'checkbox';
};

/**
 * Checks if an input is a `select` with the `multiple` attribute.
 * @param  {Element} element  the element to check
 * @return {Boolean}          true if the element is a multiselect, false if not
 */
var isMultiSelect = function isMultiSelect(element) {
  return element.options && element.multiple;
};

/**
 * Retrieves the selected options from a multi-select as an array.
 * @param  {HTMLOptionsCollection} options  the options for the select
 * @return {Array}                          an array of selected option values
 */
var getSelectValues = function getSelectValues(options) {
  return [].reduce.call(options, function (values, option) {
    return option.selected ? values.concat(option.value) : values;
  }, []);
};

/**
 * Retrieves input data from a form and returns it as a JSON object.
 * @param  {HTMLFormControlsCollection} elements  the form elements
 * @return {Object}                               form data as an object literal
 */
var formToJSON = function formToJSON(elements) {
  return [].reduce.call(elements, function (data, element) {

    // Make sure the element has the required properties and should be added.
    if (isValidElement(element) && isValidValue(element)) {

      /*
       * Some fields allow for more than one value, so we need to check if this
       * is one of those fields and, if so, store the values as an array.
       */
      if (isCheckbox(element)) {
        data[element.name] = (data[element.name] || []).concat(element.value);
      } else if (isMultiSelect(element)) {
        data[element.name] = getSelectValues(element);
      } else {
        data[element.name] = element.value;
      }
    }

    return data;
  }, {});
};

function filterFormsByCategory(forms, category) {
  return forms.filter(function (form) {
    return form.category === category;
  });
}

function handleSubmit(event) {
  event.preventDefault();

  var templateDisplayBox = document.querySelector('.template-text');
  var copyPasteTextarea = document.querySelector('.copy-paste');

  // Get the user’s form input and use it to compile the email template.
  var templateVars = formToJSON(event.target.elements);
  var compile = getEmailTemplate(templateVars.template_id);
  var compiledTemplate = compile(templateVars);

  templateDisplayBox.innerHTML = compiledTemplate;
  copyPasteTextarea.value = removeBreakTags(compiledTemplate);
}

/**
 * Show a success message briefly after copying to clipboard.
 * @return {void}
 */
function showCopiedMessage() {
  var confirmation = document.querySelector('.copied-box');

  // Remove the class so the message fades in (CSS animates it).
  confirmation.classList.remove('copied-box-hidden');

  // After 1 second, add the class again to fade it out.
  setTimeout(function () {
    confirmation.classList.add('copied-box-hidden');
  }, 1000);
}

/**
 * Turns on Clipboard.js for easy copying of the compiled templates.
 * @return {void}
 */
function enableCopyToClipboard() {

  // Initialize the copy-to-clipboard button.
  var btn = document.getElementById('btn');
  if (btn) {
    var clipboard = new Clipboard(btn);

    // After copying, show a notification.
    clipboard.on('success', showCopiedMessage);
  }
}

var initialize = function initialize(forms$$1) {
  var chooser = document.getElementById('form-chooser');
  var template = document.getElementById('template');
  var formSlug = window.location.hash.split('#')[1];
  var formValues = forms$$1.filter(function (form) {
    return form.slug === formSlug;
  })[0];

  hide(template);

  if (formValues) {
    (function () {
      var form = document.getElementById('template-questions');
      var formTemplate = Handlebars.compile(templates['form-template']);

      hide(chooser);

      form.innerHTML = formTemplate(formValues);

      form.addEventListener('submit', function (event) {
        handleSubmit(event);
        show(template);
        hide(form);
      });

      show(form);
    })();
  } else {
    (function () {
      var chooserTemplate = Handlebars.compile(templates['available-templates']);
      var templateLists = document.getElementsByClassName('available-templates');

      show(chooser);

      [].forEach.call(templateLists, function (list) {
        var category = list.dataset.category;
        var context = {
          forms: filterFormsByCategory(forms$$1, category)
        };

        list.innerHTML = chooserTemplate(context);
      });
    })();
  }
};

// Enables simpler templating for forms.
Handlebars.registerHelper('input', renderInput);

// Make it easier for users to copy-paste the compiled templates.
enableCopyToClipboard();

// Add an event listener to re-initialize when the hash changes.
window.addEventListener('hashchange', function () {
  initialize(forms);
});

// Start this mother.
window.addEventListener('load', function () {
  checkLogin(initialize.bind(null, forms));
});

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
